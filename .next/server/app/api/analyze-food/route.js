(()=>{var e={};e.id=863,e.ids=[863],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6487:()=>{},8335:()=>{},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},9655:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>m,routeModule:()=>p,serverHooks:()=>c,workAsyncStorage:()=>u,workUnitAsyncStorage:()=>d});var o={};r.r(o),r.d(o,{POST:()=>l});var s=r(6559),n=r(8088),a=r(7719),i=r(2190);async function l(e){try{let t=e.headers.get("content-length");if(t&&parseInt(t)>0xa00000)return i.NextResponse.json({error:"Request body too large - maximum allowed size is 10MB"},{status:413});let r=e.headers.get("content-type");if(!r||!r.includes("application/json"))return i.NextResponse.json({error:"Invalid content type - application/json required"},{status:415});let{image:o}=await e.json();if(!o)return i.NextResponse.json({error:"No image provided"},{status:400});if(!o.startsWith("data:image/"))return i.NextResponse.json({error:"Invalid image format - must be a data URL"},{status:400});let s=o.split(",");if(2!==s.length)return i.NextResponse.json({error:"Invalid image data URL format"},{status:400});let n=s[1];if(!n||""===n.trim())return i.NextResponse.json({error:"Empty image data"},{status:400});if(Buffer.from(n,"base64").length>0xa00000)return i.NextResponse.json({error:"Image too large - maximum allowed size is 10MB"},{status:413});let a=process.env.GEMINI_API_KEY;if(!a)return console.error("API key not configured in environment variables"),i.NextResponse.json({error:"API key not configured. Please add your Gemini API key to the .env file."},{status:500});console.log("Making request to Gemini API...");let l=await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key="+a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:"You are a nutritional analysis expert. Analyze this food image and provide the following information:\n1) Food identification: What food item(s) is shown in the image?\n2) Estimated calories per serving\n3) Key nutritional benefits (proteins, vitamins, minerals, etc.)\n4) Potential allergens or dietary considerations\n\nFormat your response in clear, labeled sections with bullet points where appropriate."},{inline_data:{mime_type:"image/jpeg",data:n}}]}],generationConfig:{temperature:.2,topK:32,topP:.95,maxOutputTokens:800},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_MEDIUM_AND_ABOVE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_MEDIUM_AND_ABOVE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_MEDIUM_AND_ABOVE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_MEDIUM_AND_ABOVE"}]}),signal:AbortSignal.timeout(3e4)});if(!l.ok){let e=await l.text();console.error("Gemini API error:",e);try{let t=JSON.parse(e);console.error("Parsed error:",t);let r=t.error?.message||"Error from Gemini API";return i.NextResponse.json({error:r},{status:l.status})}catch{return i.NextResponse.json({error:`Error from Gemini API: ${e.substring(0,100)}...`},{status:l.status})}}let p=await l.json();if(console.log("Received response from Gemini API"),p.promptFeedback?.blockReason)return console.error("Content blocked:",p.promptFeedback),i.NextResponse.json({error:"The request was blocked for safety reasons. Please try a different image."},{status:400});if(!p.candidates||0===p.candidates.length)return console.error("No candidates in Gemini response:",JSON.stringify(p,null,2)),i.NextResponse.json({error:"No analysis results returned from the AI model. Please try a different image."},{status:500});let u=p.candidates[0]?.content?.parts?.[0]?.text;if(!u)return console.error("No text in Gemini response:",JSON.stringify(p.candidates[0],null,2)),i.NextResponse.json({error:"No text content in the AI model response. Please try a different image."},{status:500});let d=u.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#039;");return i.NextResponse.json({analysis:d},{headers:{"Cache-Control":"no-store","Content-Security-Policy":"default-src 'self'","X-Content-Type-Options":"nosniff"}})}catch(e){if(console.error("Error analyzing food image:",e),e instanceof DOMException&&"AbortError"===e.name)return i.NextResponse.json({error:"The request timed out. Please try again with a smaller image."},{status:408});return i.NextResponse.json({error:"Failed to analyze the image. Please try again."},{status:500})}}let p=new s.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/analyze-food/route",pathname:"/api/analyze-food",filename:"route",bundlePath:"app/api/analyze-food/route"},resolvedPagePath:"C:\\Users\\UNIHU\\Documents\\GitHub\\nu\\src\\app\\api\\analyze-food\\route.ts",nextConfigOutput:"",userland:o}),{workAsyncStorage:u,workUnitAsyncStorage:d,serverHooks:c}=p;function m(){return(0,a.patchFetch)({workAsyncStorage:u,workUnitAsyncStorage:d})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[447,580],()=>r(9655));module.exports=o})();